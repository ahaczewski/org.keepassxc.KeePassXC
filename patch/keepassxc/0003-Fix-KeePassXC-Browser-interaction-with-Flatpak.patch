From 24a5d56df096cd86b3b89c34b4717572c29cbeb5 Mon Sep 17 00:00:00 2001
From: AsavarTzeth <asavartzeth@gmail.com>
Date: Mon, 28 May 2018 21:29:15 +0200
Subject: [PATCH 3/5] Fix KeePassXC-Browser interaction with Flatpak

By default, `keepassxc-proxy` will act as a proxy between `keepassxc`
and a browser. The browser communicates using the Native Messaging Host
API, over stdio.

There are a great many issues with this approach. Most noteworthy:
1. The browser needs to execute `keepassxc-proxy` and pass arguments to
   it, which it cannot due to sandboxing.
2. This must be an absolute path, which excludes
   `flatpak run --command=keepassxc-proxy`.
3. This can be worked around with wrappers provided by Flatpak:
   "/var/lib/flatpak/exports/bin/org.keepassxc.KeePassXC"
   But if any other installation path is used the user must configure
   this manually.
4. This alone is not enough, since that would just execute `keepassxc`.
   It can be worked around with a wrapper script that matches and
   redirects arguments to `keepassxc-proxy`. Feels like a hack though.
5. All of this is moot if the browser too is sandboxed, in which case
   it cannot execute any other app.

This fix makes almost everything work out of the box, assuming that the
browser is not sandboxed and org.keepassxc.KeePassXC is installed in the
default system-wide installation.

Hopefully in the future the Native Messaging Host API will support D-Bus.
---
 src/browser/BrowserOptionDialog.cpp | 17 ++++++++++++++++-
 src/browser/HostInstaller.cpp       |  8 +++++++-
 src/browser/NativeMessagingBase.cpp |  4 ++++
 3 files changed, 27 insertions(+), 2 deletions(-)

diff --git a/src/browser/BrowserOptionDialog.cpp b/src/browser/BrowserOptionDialog.cpp
index dd91f159..292c68a7 100644
--- a/src/browser/BrowserOptionDialog.cpp
+++ b/src/browser/BrowserOptionDialog.cpp
@@ -52,6 +52,7 @@ BrowserOptionDialog::BrowserOptionDialog(QWidget* parent)
     // clang-format on
 
     m_ui->scriptWarningWidget->setVisible(false);
+#if !defined(KEEPASSXC_DIST_FLATPAK)
     m_ui->scriptWarningWidget->setAutoHideTimeout(-1);
     m_ui->scriptWarningWidget->showMessage(
         tr("<b>Warning</b>, the keepassxc-proxy application was not found!"
@@ -59,6 +60,7 @@ BrowserOptionDialog::BrowserOptionDialog(QWidget* parent)
            "<br />Browser integration WILL NOT WORK without the proxy application."
            "<br />Expected Path: "),
         MessageWidget::Warning);
+#endif
 
     m_ui->warningWidget->showMessage(tr("<b>Warning:</b> The following options can be dangerous!"),
                                      MessageWidget::Warning);
@@ -69,10 +71,13 @@ BrowserOptionDialog::BrowserOptionDialog(QWidget* parent)
     connect(m_ui->enableBrowserSupport, SIGNAL(toggled(bool)), m_ui->tabWidget, SLOT(setEnabled(bool)));
 
     m_ui->customProxyLocation->setEnabled(m_ui->useCustomProxy->isChecked());
-    m_ui->customProxyLocationBrowseButton->setEnabled(m_ui->useCustomProxy->isChecked());
     connect(m_ui->useCustomProxy, SIGNAL(toggled(bool)), m_ui->customProxyLocation, SLOT(setEnabled(bool)));
+// triggers the xdg filechooser portal which will not work
+#if !defined(KEEPASSXC_DIST_FLATPAK)
+    m_ui->customProxyLocationBrowseButton->setEnabled(m_ui->useCustomProxy->isChecked());
     connect(m_ui->useCustomProxy, SIGNAL(toggled(bool)), m_ui->customProxyLocationBrowseButton, SLOT(setEnabled(bool)));
     connect(m_ui->customProxyLocationBrowseButton, SIGNAL(clicked()), this, SLOT(showProxyLocationFileDialog()));
+#endif
 
 #ifdef Q_OS_WIN
     // Vivaldi uses Chrome's registry settings
@@ -144,8 +149,17 @@ void BrowserOptionDialog::loadSettings()
                                                   MessageWidget::Warning);
     m_ui->browserGlobalWarningWidget->setCloseButtonVisible(false);
     m_ui->browserGlobalWarningWidget->setAutoHideTimeout(-1);
+#elif defined(KEEPASSXC_DIST_FLATPAK)
+    // Disable settings that will not work
+    m_ui->supportBrowserProxy->setChecked(true);
+    m_ui->supportBrowserProxy->setEnabled(false);
+    // Triggers the xdg filechooser portal which will not work
+    m_ui->customProxyLocationBrowseButton->setEnabled(false);
 #endif
 
+// keepassxc runs in a different namespace and any absolute path that does work,
+// will be unreachable and seem invalid from inside the sandbox
+#if !defined(KEEPASSXC_DIST_FLATPAK)
     // Check for native messaging host location errors
     QString path;
     if (!settings->checkIfProxyExists(path)) {
@@ -156,6 +170,7 @@ void BrowserOptionDialog::loadSettings()
     } else {
         m_ui->scriptWarningWidget->setVisible(false);
     }
+#endif
 }
 
 void BrowserOptionDialog::saveSettings()
diff --git a/src/browser/HostInstaller.cpp b/src/browser/HostInstaller.cpp
index 08782fa1..aa81967e 100644
--- a/src/browser/HostInstaller.cpp
+++ b/src/browser/HostInstaller.cpp
@@ -249,12 +249,18 @@ QString HostInstaller::getInstallDir(SupportedBrowsers browser) const
 QString HostInstaller::getProxyPath(const bool& proxy, const QString& location) const
 {
     QString path;
-#ifdef KEEPASSXC_DIST_APPIMAGE
+#if defined(KEEPASSXC_DIST_APPIMAGE)
     if (proxy && !location.isEmpty()) {
         path = location;
     } else {
         path = QProcessEnvironment::systemEnvironment().value("APPIMAGE");
     }
+#elif defined(KEEPASSXC_DIST_FLATPAK)
+    if (proxy && !location.isEmpty()) {
+        path = location;
+    } else {
+        path = "/var/lib/flatpak/exports/bin/org.keepassxc.KeePassXC";
+    }
 #else
     if (proxy) {
         if (!location.isEmpty()) {
diff --git a/src/browser/NativeMessagingBase.cpp b/src/browser/NativeMessagingBase.cpp
index a6b8d97c..16115fb6 100644
--- a/src/browser/NativeMessagingBase.cpp
+++ b/src/browser/NativeMessagingBase.cpp
@@ -17,6 +17,7 @@
  */
 
 #include "NativeMessagingBase.h"
+#include "config-keepassx.h"
 #include <QStandardPaths>
 
 #if defined(Q_OS_UNIX) && !defined(Q_OS_LINUX)
@@ -139,6 +140,9 @@ QString NativeMessagingBase::getLocalServerPath() const
     const QString serverPath = "/kpxc_server";
 #if defined(KEEPASSXC_DIST_SNAP)
     return QProcessEnvironment::systemEnvironment().value("SNAP_COMMON") + serverPath;
+#elif defined(KEEPASSXC_DIST_FLATPAK)
+    return QStandardPaths::writableLocation(QStandardPaths::RuntimeLocation)
+        + "/app/org.keepassxc.KeePassXC" + serverPath;
 #elif defined(Q_OS_UNIX) && !defined(Q_OS_MACOS)
     // Use XDG_RUNTIME_DIR instead of /tmp if it's available
     QString path = QStandardPaths::writableLocation(QStandardPaths::RuntimeLocation);
-- 
2.21.0

